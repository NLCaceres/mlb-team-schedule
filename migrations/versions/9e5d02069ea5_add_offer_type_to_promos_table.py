"""Add Offer Type to Promos Table

Revision ID: 9e5d02069ea5
Revises: 3e22d5a4a6a6
Create Date: 2023-11-05 19:25:57.278307

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9e5d02069ea5'
down_revision = '3e22d5a4a6a6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.add_column('promos', sa.Column('offer_type', sa.String(), nullable=True))

    conn = op.get_bind() #? Grab Alembic's Connection (commonly interchangeable w/ SQLAlchemy's Engine obj)
    meta_data = sa.MetaData() #? Acts as a Singleton representation of the DB, its tables, and columns
    promo_table = sa.Table('promos', meta_data, autoload_with=conn) #? Use the Connection+MetaData to reflect the PromoTable
    conn.execute(promo_table.update().values(offer_type='')) #? Run update statement on table to set val for offer_type col
    # conn.execute(sa.update(promo_table).values(offer_type='')) #? An alternate more common version of the above statement

    op.alter_column('promos', 'offer_type', nullable=False) #? Prevent all future Promos from NOT init'ing their offer_type

    #? Originally used `with op.batch_alert_table('promos', schema=None) as batch_op` BUT that would work a lot like commit()
    #? batch_op runs adds or alters SIMULTANEOUSLY causing a DB Integrity error due to the final NOT-NULLABLE constraint

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table('promos', schema=None) as batch_op:
        batch_op.drop_column('offer_type')

    # ### end Alembic commands ###
